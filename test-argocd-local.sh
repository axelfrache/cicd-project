#!/bin/bash

# Script de test complet ArgoCD en local
# Usage: ./test-argocd-local.sh

set -e

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${GREEN}=== Test ArgoCD en local ===${NC}\n"

# VÃ©rifier que ArgoCD est installÃ©
if ! kubectl get namespace argocd &> /dev/null; then
    echo -e "${RED}ArgoCD n'est pas installÃ©. ExÃ©cutez d'abord: ./argocd/install-argocd.sh${NC}"
    exit 1
fi

echo -e "${YELLOW}[1/8] VÃ©rification de l'application de production...${NC}"
if argocd app get springcity-prod &> /dev/null; then
    echo -e "${GREEN}âœ“ Application de production trouvÃ©e${NC}"
    argocd app get springcity-prod | grep -E "Health Status|Sync Status"
else
    echo -e "${RED}âœ— Application de production non trouvÃ©e${NC}"
    exit 1
fi

echo -e "\n${YELLOW}[2/8] CrÃ©ation d'un environnement Ã©phÃ©mÃ¨re de test...${NC}"
kubectl apply -f argocd/test-pr-local.yaml
sleep 2

echo -e "\n${YELLOW}[3/8] Synchronisation de l'environnement de test...${NC}"
argocd app sync springcity-pr-test --timeout 300

echo -e "\n${YELLOW}[4/8] Attente que l'application soit healthy...${NC}"
argocd app wait springcity-pr-test --health --timeout 300

echo -e "\n${YELLOW}[5/8] VÃ©rification des ressources crÃ©Ã©es...${NC}"
kubectl get all -n springcity-pr-test

echo -e "\n${YELLOW}[6/8] Test de l'application...${NC}"
# Port-forward en arriÃ¨re-plan
kubectl port-forward -n springcity-pr-test svc/springcity-pr-test 9999:2022 &
PF_PID=$!
sleep 5

# Tester l'API
if curl -f http://localhost:9999/_health &> /dev/null; then
    echo -e "${GREEN}âœ“ Application rÃ©pond correctement${NC}"
    curl http://localhost:9999/_health
else
    echo -e "${RED}âœ— Application ne rÃ©pond pas${NC}"
    kill $PF_PID 2>/dev/null || true
    exit 1
fi

# ArrÃªter le port-forward
kill $PF_PID 2>/dev/null || true

echo -e "\n${YELLOW}[7/8] Simulation d'une mise Ã  jour...${NC}"
kubectl patch application springcity-pr-test -n argocd --type merge -p '
{
  "spec": {
    "source": {
      "helm": {
        "parameters": [
          {"name": "image.tag", "value": "latest"},
          {"name": "replicaCount", "value": "2"}
        ]
      }
    }
  }
}'

echo -e "Attente de la synchronisation automatique..."
sleep 10
argocd app get springcity-pr-test | grep -E "Health Status|Sync Status"

echo -e "\n${YELLOW}[8/8] Nettoyage - Suppression de l'environnement de test...${NC}"
argocd app delete springcity-pr-test --yes --cascade

# Attendre la suppression complÃ¨te
echo -e "Attente de la suppression complÃ¨te..."
sleep 10

# VÃ©rifier que le namespace est bien supprimÃ©
if kubectl get namespace springcity-pr-test &> /dev/null; then
    echo -e "${RED}âœ— Le namespace n'a pas Ã©tÃ© supprimÃ©${NC}"
    exit 1
else
    echo -e "${GREEN}âœ“ Namespace supprimÃ© avec succÃ¨s${NC}"
fi

echo -e "\n${GREEN}=== Tous les tests sont passÃ©s ! ===${NC}"
echo -e "\n${GREEN}RÃ©sumÃ© :${NC}"
echo -e "âœ“ Application de production fonctionne"
echo -e "âœ“ Environnement Ã©phÃ©mÃ¨re crÃ©Ã©"
echo -e "âœ“ Application dÃ©ployÃ©e et accessible"
echo -e "âœ“ Mise Ã  jour automatique fonctionne"
echo -e "âœ“ Suppression et nettoyage fonctionnent"
echo -e "\n${YELLOW}ArgoCD est prÃªt Ã  Ãªtre utilisÃ© ! ğŸš€${NC}"
