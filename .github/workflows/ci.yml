name: CI

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - '**/README.md'
      - '**/*.md'
      - 'docs/**'
      - '.gitignore'
      - '.editorconfig'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
      - '**/*.md'
      - 'docs/**'
      - '.gitignore'
      - '.editorconfig'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify:
    name: Verify Code
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache ktlint
        id: cache-ktlint
        uses: actions/cache@v3
        with:
          path: ./ktlint
          key: ${{ runner.os }}-ktlint-1.0.1

      - name: Download ktlint
        if: steps.cache-ktlint.outputs.cache-hit != 'true'
        run: |
          curl -sSLO https://github.com/pinterest/ktlint/releases/download/1.0.1/ktlint
          chmod a+x ktlint

      - name: Run ktlint
        run: |
          ./ktlint "src/**/*.kt" || {
            echo "Des erreurs de style ont été trouvées."
            exit 1
          }

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Run tests and verify
        run: |
          mvn verify \
            -B \
            -T 2C \
            -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
            -Dmaven.test.failure.ignore=false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/surefire-reports
          retention-days: 7

  build:
    name: Build and Push Docker Image
    needs: verify
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Optimisation: récupère uniquement le dernier commit

      - name: Determine Docker tags
        id: docker_meta
        run: |
          # Pour les tags Git (releases)
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "tags=${{ secrets.DOCKERHUB_USERNAME }}/city-api:${VERSION},${{ secrets.DOCKERHUB_USERNAME }}/city-api:latest" >> $GITHUB_OUTPUT
          # Pour les PRs
          elif [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
            PR_NUM=${{ github.event.pull_request.number }}
            echo "tags=${{ secrets.DOCKERHUB_USERNAME }}/city-api:pr-${PR_NUM},${{ secrets.DOCKERHUB_USERNAME }}/city-api:pr-${PR_NUM}-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          # Pour la branche main
          elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "tags=${{ secrets.DOCKERHUB_USERNAME }}/city-api:main,${{ secrets.DOCKERHUB_USERNAME }}/city-api:latest" >> $GITHUB_OUTPUT
          # Pour les autres branches
          else
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            BRANCH_NAME_SAFE=${BRANCH_NAME//\//-}
            echo "tags=${{ secrets.DOCKERHUB_USERNAME }}/city-api:${BRANCH_NAME_SAFE}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.docker_meta.outputs.tags }}
          platforms: linux/amd64
          provenance: false
          builder: ${{ steps.buildx.outputs.name }}

      - name: Extract first tag for Trivy scan
        id: first_tag
        run: |
          FIRST_TAG=$(echo "${{ steps.docker_meta.outputs.tags }}" | cut -d',' -f1)
          echo "image=${FIRST_TAG}" >> $GITHUB_OUTPUT

      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.first_tag.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          cache: true
          timeout: '5m'
          ignore-unfixed: true
          security-checks: 'vuln,config,secret'

      - name: Cache Trivy vulnerability database
        uses: actions/cache@v3
        with:
          path: .trivycache/
          key: ${{ runner.os }}-trivy-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'